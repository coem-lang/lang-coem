@precedence {
  cond,
  trail,
  compare @left,
  and @left,
  or @left
}

@top Script { ( newline | statement )+ }

@skip { space | newlineEmpty | newlineBracketed | Comment }

FunctionDefinition {
  kw<"to"> VariableName
  ParamList
  Body
}

ParamList { "—" commaSep<param>? "—" }

param { VariableName }

statement { simpleStatement | compoundStatement }

simpleStatement {
  smallStatement ( newline | eof )
}

smallStatement {
  CallExpression { expression !trail ArgList } |
  AssignStatement { kw<"let"> expression ( kw<"be"> expression )? } |
  ExpressionStatement { expression } |
  ReturnStatement { "&" expression }
}

commaSep<expr> { expr ( "," expr )* }

compoundStatement {
  IfStatement |
  WhileStatement { kw<"while"> "—" testNamed "—" Body elseClause? } |
  FunctionDefinition
}

elseClause { kw<"else"> Body }

IfStatement {
  kw<"if"> "—" testNamed "—" Body
  ( kw<"else"> kw<"if"> testNamed? Body )*
  elseClause?
}

Body { ":" newline indent statement+ "." ( dedent | eof ) }

test {
  testInner |
  ConditionalExpression { testInner !cond kw<"if"> testInner kw<"else"> test }
}

testNamed {
  test | NamedExpression { test kw<"be"> test }
}

testInner { binaryTest | unaryTest | expression }

binaryTest[@name="BinaryExpression"] {
  testInner !or kw<"or"> testInner |
  testInner !and kw<"and"> testInner |
  testInner !compare ( ( kw<"is"> | kw<"am"> | kw<"are"> ) kw<"not">? ) testInner
}

unaryTest[@name="UnaryExpression"] { kw<"not"> testInner }

expression[@isGroup=Expression] {
  VariableName |
  String |
  @specialize[@name=Nothing]<identifier, "nothing"> |
  @specialize[@name=Boolean]<identifier, "true" | "false">
}

ArgList { "—" commaSep<argument>? "—" }

argument { test }

VariableName { identifier }

kw<term> { @specialize[@name={term}]<identifier, term> }

@context trackIndent from "./tokens.js"

@external tokens indentation from "./tokens" { indent, dedent }

@tokens {
  identifierChar { $[A-Za-z|()\[\]?*+] }
  word { identifierChar+ }
  identifier { word }

  String { "“" ( ![”†] | "†" _ )* "”" }

  Comment { "†" ![\n\r]* }

  space { ($[ \t\f] | "\\" $[\n\r])+ }
}

@external tokens newlines from "./tokens" { newline, newlineBracketed, newlineEmpty, eof }